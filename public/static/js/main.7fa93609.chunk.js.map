{"version":3,"sources":["components/Task.js","components/TaskList.js","components/InputBar.js","components/TodoTitle.js","components/apiCall.js","components/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["Task","todo","updateStatus","handleDelete","id","task","status","className","onClick","TaskList","props","list","map","key","InputBar","useState","value","setValue","onSubmit","event","preventDefault","type","onChange","target","defaultProps","TodoTitle","isEditable","toggleEditable","title","inputBox","updateTitle","getOptions","body","method","headers","JSON","stringify","optionsForPost","fetchReq","url","a","fetch","res","json","apiCall","action","setNewState","setState","then","TodoApp","dispatch","bind","useEffect","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7fa93609.chunk.js","sourcesContent":["import React from 'react';\n\nconst Task = ({ todo, updateStatus, handleDelete }) => {\n  const { id, task, status } = todo;\n  return (\n    <div className={`taskContainer ${status}`}>\n      <div className=\"taskIcon\"></div>\n      <div className=\"taskContent\">\n        <span onClick={() => updateStatus(id)}>{task}</span>\n        <div className=\"deleteTaskBtn\" onClick={() => handleDelete(id)}>X</div>\n      </div>\n    </div >\n  );\n}\n\nexport default Task;","import React from 'react';\nimport Task from './Task';\n\nconst TaskList = (props) => {\n  const list = props.list.map((task) => (\n    <Task todo={task} key={task.id}\n      updateStatus={props.updateStatus}\n      handleDelete={props.handleDelete}\n    />\n  ))\n\n  return (<div>{list}</div>);\n}\n\nexport default TaskList;","import React, { useState } from 'react';\n\nconst InputBar = function(props) {\n  const [value, setValue] = useState(props.value);\n\n  const handleChange = (event) => setValue(event.target.value);\n\n  const handleSubmit = function(event) {\n    event.preventDefault();\n    if (value) {\n      props.onSubmit(value);\n      setValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={value} onChange={handleChange} />\n    </form>\n  );\n};\n\nInputBar.defaultProps = { value: '' };\n\nexport default InputBar;","import React, { useState } from 'react';\nimport InputBar from './InputBar';\n\nconst TodoTitle = function(props) {\n  const [isEditable, toggleEditable] = useState(false);\n\n  const updateTitle = function(title) {\n    toggleEditable(!isEditable);\n    props.updateTitle(title);\n  }\n\n  const title = (\n    <div className=\"title\">\n      <span onClick={() => toggleEditable(!isEditable)}> {props.value}</span>\n      <div className=\"deleteTasksBtn\" onClick={() => props.handleDelete()}>X</div>\n    </div>\n  );\n\n  const inputBox = (\n    <div className=\"title\">\n      <InputBar value={props.value} onSubmit={updateTitle} />\n    </div>\n  );\n\n  return isEditable ? inputBox : title;\n}\n\nexport default TodoTitle;","const optionsForGet = () => {\n  return {\n    headers: { 'Content-Type': 'application/json' },\n  };\n};\n\nconst optionsForPost = (body) => {\n  return {\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(body),\n    method: 'POST',\n  };\n};\n\nconst getOptions = (body, method) => {\n  if (method === 'GET') return optionsForGet();\n  return optionsForPost(body);\n};\n\nconst fetchReq = async (url, body, method = 'GET') => {\n  const res = await fetch(url, getOptions(body, method));\n  return await res.json();\n};\n\nconst apiCall = (action) => {\n  switch (action.type) {\n    case 'REMOVE_ALL':\n      return fetchReq('/api/removeAll');\n    case 'UPDATE_STATUS':\n      return fetchReq(`/api/updateStatus/${action.id}`);\n    case 'REMOVE_TASK':\n      return fetchReq(`/api/removeTask/${action.id}`);\n    case 'UPDATE_TITLE':\n      return fetchReq('/api/updateTitle', { title: action.title }, 'POST');\n    case 'ADD_TASK':\n      return fetchReq('/api/addTask', { task: action.task }, 'POST');\n    default:\n      return fetchReq('/api/initiateState');\n  }\n};\n\nexport default apiCall;","import React, { useState, useEffect } from 'react';\nimport TaskList from './TaskList.js';\nimport InputBar from './InputBar';\nimport TodoTitle from './TodoTitle';\nimport apiCall from './apiCall';\n\nconst setNewState = (setState, action) => apiCall(action).then(setState);\n\nconst TodoApp = function(props) {\n  const [{ title, list }, setState] = useState({ title: 'Todo', list: [] });\n\n  const dispatch = setNewState.bind(null, setState);\n  const updateStatus = (id) => dispatch({ type: 'UPDATE_STATUS', id });\n  const removeTask = (id) => dispatch({ type: 'REMOVE_TASK', id });\n  const addTask = (task) => dispatch({ type: 'ADD_TASK', task });\n  const updateTitle = (title) => dispatch({ type: 'UPDATE_TITLE', title });\n  const removeAll = () => dispatch({ type: 'REMOVE_ALL' });\n\n  useEffect(() => {\n    dispatch({}); \n  }, []);\n\n  return (\n    <div>\n      <TodoTitle value={title} updateTitle={updateTitle} handleDelete={removeAll} />\n      <TaskList list={list} updateStatus={updateStatus} handleDelete={removeTask} />\n      <InputBar onSubmit={addTask} />\n    </div>\n  )\n}\n\nexport default TodoApp;","import React from 'react';\nimport './App.css';\nimport TodoApp from './components/TodoApp';\n\nconst App = (props) => {\n  return <TodoApp />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}